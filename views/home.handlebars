{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container">
    <!--  -->
        <!-- show the create post form when logged in -->
    {{#if loggedIn}}
    <section class="post-form">
        <!-- make a header here -->

        <h1> Create a new Post </h1>
        <form action="/posts" method="POST" enctype="multipart/form-data">
            <!-- title input field name = "title" -->
            <!-- text area input field name = "content" -->
            <input name="title" id="title" onclick="enableTitle()" placeholder="Title" minlength="1" required>
            <textarea id="description" name="content" onclick="enableDesc()" placeholder="What do you want to talk about?" minlength="1" required></textarea>
            <input name="bidValue" id="title"  placeholder="Bid value" minlength="1" required>
            <input name="file" type="file" >
            <div class="form-actions">
                <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                
                <button type="submit" class="post-button">Post</button>
            </div>
    
        </form>


        <div id="emoji-container" class="emoji-panel" style="display: none;">
            <!-- input field for the emoji search, use oninput="searchEmojis() -->
            <!-- a div, id = "emoji-grid" -->
            <input name="emoji-search" id="emoji-search" oninput="searchEmojis()">
            <div id="emoji-grid">

            </div>

        </div>
    </section>
     {{/if}}

    {{#if posts.length}}
    <section class="posts-list">
        
        <ul class="displayFlex">
        <div class="sortDisplay">
            <button  onclick=displaySort()> Sort by </button>
            <div class="sortButton">
            <button  class="sortButton" value="Likes" onclick=handleLike(event)> Likes </button>
            <button  class="sortButton"  value="Recent" onclick=handleRecent(event)> Recent </button>
            <button  class="sortButton" value="Bet" onclick=handleBet(event)> Price </button>
            </div>
        </div>
        </ul>
        <div>
            {{#each posts}}
                <!-- you have to pass the user in to posts and this is the syntax -->
                {{> post this user=../user}}            
            {{/each}}
        </div>


    </section>
    {{else}}
    {{/if}}

</section>



  


{{! JavaScript for Emoji Integration }}
<script>

/*
 You want to show a subset of the emojis. About 200. However,
 you also want the user to be able to search all emojis,
 so, put them in this array when the array is empty so 
 that you have them.
*/
function displaySort() {

}

function handleLike(event) {
  
    const postId = event.target.getAttribute('data-id');

    fetch(`/postChange`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `curType=Like`
    })

    .then(response => {
            if (response.ok) {
    // Deletion successful, reload the page
                window.location.reload();
            } else {
                console.error('Failed to delete the post.');
            }
    }) 
    .catch(error => {
        console.error('Error deleting post:', error);
    });
    
    // you might want to "fetch" something...        
}
function handleBet(event) {
  
    const postId = event.target.getAttribute('data-id');

    fetch(`/postChange`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `curType=Bet`
    })

    .then(response => {
            if (response.ok) {
    // Deletion successful, reload the page
                window.location.reload();
            } else {
                console.error('Failed to delete the post.');
            }
    }) 
    .catch(error => {
        console.error('Error deleting post:', error);
    });
    
    // you might want to "fetch" something...        
}


function handleRecent(event) {

    
    const postId = event.target.getAttribute('data-id');

    fetch(`/postChange`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `curType=Recent`
    })

    .then(response => {
            if (response.ok) {
    // Deletion successful, reload the page
                window.location.reload();
            } else {
                console.error('Failed to delete the post.');
            }
    }) 
    .catch(error => {
        console.error('Error deleting post:', error);
    });
    
    // you might want to "fetch" something...        
}

let allEmojis = [];  // Global list to hold all emojis

textarea = "";

function enableDesc() {
    textarea = document.getElementById('description')
}

function enableTitle() {
    textarea = document.getElementById('title')
}

function toggleEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';



    if(container.style.display === 'block' && allEmojis.length == 0){
        // go "Fetch" you some emojis and show them off with displayEmojies
        fetch(`https://emoji-api.com/emojis?access_key={{{accessToken}}}`)
            .then(response => response.json())
            .then(emojis => {processEmoji(emojis);})
            .catch(error => console.error('Error fetching emojis:', error)); 
    }
}

function processEmoji(emoji) {
    allEmojis = emoji;
    displayEmojis(emoji);
}

function displayEmojis(emojis,limit=200) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';  // Clear previous results
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;  // Showing the emoji name on hover
            emojiElement.style.cursor = 'pointer';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    // array.filter takes a predicate
    // use string.includes. 

    const filteredEmojis = allEmojis.filter(function(curEmoji) {
            return curEmoji.slug.includes(searchTerm) || curEmoji.group.includes(searchTerm);
        });
    displayEmojis(filteredEmojis);
}

function insertEmoji(emoji) {
    // put an emoji on a form somehow. 

    // do this when you're doing getting the emoji on the form
    //

    textarea.value=  textarea.value + emoji;
    textarea.focus();  // Keep focus on the textarea
}
</script>

