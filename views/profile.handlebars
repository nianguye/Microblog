{{! Use the main layout }}
{{!< main }}

<div class="profile-container">
    <div class="profile-avatar">
        <!-- Correct path for the default avatar image -->
    </div>
    
    <section class="profile-info">
        <!-- user profile info -->
        <div class="profileImage">
        <img src="{{#if user.avatar_url}}
                        {{user.avatar_url}}
                    {{else}}
                        /avatar/{{user.username}}
                    {{/if}}" 
                    alt="User Avatar" 
                    class="header-avatar">
        </div>
        <div class="userDescription">
            <h1>User Profile</h1>
            <p><b>Username: </b> {{user.username}}</p>
            <p><b>Member Since:</b> {{user.memberSince}} </p>
        </div>
    </section>
</div>

<section class="user-posts">
    <!-- you can call posts tweets, or truths, or whatever, these are neologisms. Choose your own new in server.js -->
    <h2>Your {{{postNeoType}}}s</h2>
    <!-- you'll need to make this conditional and #each expression work -->
    <div>
    {{#if currentUser.posts.length}}
        <div class="displayFlex">
            <input type="radio" id="option1" name="choices" value="Likes" onclick=handleLike(event)>
            <label for="option1" >Likes</label><br>

            <input type="radio" id="option2" name="choices" value="Recent"  onclick=handleRecent(event)>
            <label for="option2">Recent</label><br>
        </div>
        <ul>
            {{#each currentUser.posts}}
                {{> post this user=../user}}
            {{/each}}
        </ul>
    {{else}}
        <!-- fix this up with some helper functions and other handlebars expressions, or add you own character -->
        <p>You have not posted yet, poster.</p>
    {{/if}}
    </div>
</section>

<script>
function handleLike(event) {
  
    const postId = event.target.getAttribute('data-id');

    fetch(`/postChange`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `curType=Like`
    })

    .then(response => {
            if (response.ok) {
    // Deletion successful, reload the page
                window.location.reload();
            } else {
                console.error('Failed to delete the post.');
            }
    }) 
    .catch(error => {
        console.error('Error deleting post:', error);
    });
    
    // you might want to "fetch" something...        
}

function handleRecent(event) {

    
    const postId = event.target.getAttribute('data-id');

    fetch(`/postChange`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `curType=Recent`
    })

    .then(response => {
            if (response.ok) {
    // Deletion successful, reload the page
                window.location.reload();
            } else {
                console.error('Failed to delete the post.');
            }
    }) 
    .catch(error => {
        console.error('Error deleting post:', error);
    });
    
    // you might want to "fetch" something...        
}
</script>